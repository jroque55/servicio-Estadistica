<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/main/java/com/metamapa/Domain/entities/EstadisticaHechoPorProvinciaDeUnaColeccion.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/metamapa/Domain/entities/EstadisticaHechoPorProvinciaDeUnaColeccion.java" />
              <option name="originalContent" value="package com.metamapa.Domain.entities;&#10;&#10;import java.util.Collections;&#10;import java.util.Comparator;&#10;import java.util.HashMap;&#10;import java.util.List;&#10;import java.util.Map;&#10;import java.util.Map.Entry;&#10;import java.util.Optional;&#10;&#10;/**&#10; * Estadística que obtiene de un ClienteAgregador la lista de provincias de una colección&#10; * y construye un mapa provincia -&gt; cantidad de hechos. Expone el mapa y la provincia con más hechos.&#10; */&#10;public class EstadisticaHechoPorProvinciaDeUnaColeccion implements InterfaceEstadistica {&#10;    private final Long idColeccion;&#10;&#10;    // mapa provincia -&gt; cantidad de hechos&#10;    private final Map&lt;String, Integer&gt; mapaProvincias = new HashMap&lt;&gt;();&#10;    private String resultado = InterfaceEstadistica.RESULTADO;&#10;&#10;    public EstadisticaHechoPorProvinciaDeUnaColeccion(Long idColeccion) {&#10;        this.idColeccion = idColeccion;&#10;    }&#10;&#10;    @Override&#10;    public void actualizarResultado() {&#10;        mapaProvincias.clear();&#10;        resultado = InterfaceEstadistica.RESULTADO;&#10;&#10;        // obtener el singleton ClienteAgregador&#10;        ClienteAgregador cliente = ClienteAgregador.getInstance();&#10;&#10;        if (cliente == null) {&#10;            // no hay cliente disponible -&gt; no se puede calcular&#10;            return;&#10;        }&#10;&#10;        List&lt;String&gt; provincias;&#10;        try {&#10;            provincias = cliente.obtenerEstadisticaAgregador(idColeccion, &quot;provincia&quot;, null);&#10;        } catch (Exception ex) {&#10;            return;&#10;        }&#10;&#10;        if (provincias == null || provincias.isEmpty()) {&#10;            return;&#10;        }&#10;&#10;        for (String provRaw : provincias) {&#10;            if (provRaw == null) continue;&#10;            String prov = provRaw.trim();&#10;            if (prov.isEmpty()) continue;&#10;            mapaProvincias.merge(prov, 1, Integer::sum);&#10;        }&#10;&#10;        if (mapaProvincias.isEmpty()) {&#10;            resultado = InterfaceEstadistica.RESULTADO;&#10;            return;&#10;        }&#10;&#10;        Entry&lt;String, Integer&gt; maxEntry = Collections.max(mapaProvincias.entrySet(), Comparator.comparingInt(Entry::getValue));&#10;        resultado = String.format(&quot;%s (%d)&quot;, maxEntry.getKey(), maxEntry.getValue());&#10;    }&#10;&#10;    // devuelve el mapa inmutable&#10;    public Map&lt;String, Integer&gt; getMapaProvincias() {&#10;        return Collections.unmodifiableMap(mapaProvincias);&#10;    }&#10;&#10;    // devuelve la provincia con más hechos y su cuenta si existe&#10;    public Optional&lt;Entry&lt;String, Integer&gt;&gt; getProvinciaConMasHechos() {&#10;        if (mapaProvincias.isEmpty()) return Optional.empty();&#10;        Entry&lt;String, Integer&gt; max = Collections.max(mapaProvincias.entrySet(), Comparator.comparingInt(Entry::getValue));&#10;        return Optional.of(max);&#10;    }&#10;&#10;    public String getResultado() {&#10;        actualizarResultado();&#10;        return resultado;&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.metamapa.Domain.entities;&#10;&#10;import java.util.Collections;&#10;import java.util.Comparator;&#10;import java.util.HashMap;&#10;import java.util.List;&#10;import java.util.Map;&#10;import java.util.Map.Entry;&#10;import java.util.Optional;&#10;&#10;/**&#10; * Estadística que obtiene de un ClienteAgregador la lista de provincias de una colección&#10; * y construye un mapa provincia -&gt; cantidad de hechos. Expone el mapa y la provincia con más hechos.&#10; */&#10;public class EstadisticaHechoPorProvinciaDeUnaColeccion implements InterfaceEstadistica {&#10;    private final Long idColeccion;&#10;&#10;    // mapa provincia -&gt; cantidad de hechos&#10;    private final Map&lt;String, Integer&gt; mapaProvincias = new HashMap&lt;&gt;();&#10;    private String resultado = InterfaceEstadistica.RESULTADO;&#10;&#10;    public EstadisticaHechoPorProvinciaDeUnaColeccion(Long idColeccion) {&#10;        this.idColeccion = idColeccion;&#10;    }&#10;&#10;    @Override&#10;    public void actualizarResultado() {&#10;        mapaProvincias.clear();&#10;        resultado = InterfaceEstadistica.RESULTADO;&#10;&#10;        // obtener el singleton ClienteAgregador&#10;        ClienteAgregador cliente = ClienteAgregador.getInstance();&#10;&#10;        if (cliente == null) {&#10;            // no hay cliente disponible -&gt; no se puede calcular&#10;            return;&#10;        }&#10;&#10;        List&lt;String&gt; provincias;&#10;        try {&#10;            provincias = cliente.obtenerEstadisticaAgregador(idColeccion, &quot;provincia&quot;, null);&#10;        } catch (Exception ex) {&#10;            return;&#10;        }&#10;&#10;        if (provincias == null || provincias.isEmpty()) {&#10;            return;&#10;        }&#10;&#10;        for (String provRaw : provincias) {&#10;            if (provRaw == null) continue;&#10;            String prov = provRaw.trim();&#10;            if (prov.isEmpty()) continue;&#10;            mapaProvincias.merge(prov, 1, Integer::sum);&#10;        }&#10;&#10;        if (mapaProvincias.isEmpty()) {&#10;            resultado = InterfaceEstadistica.RESULTADO;&#10;            return;&#10;        }&#10;&#10;        Entry&lt;String, Integer&gt; maxEntry = Collections.max(mapaProvincias.entrySet(), Comparator.comparingInt(Entry::getValue));&#10;        resultado = String.format(&quot;%s (%d)&quot;, maxEntry.getKey(), maxEntry.getValue());&#10;    }&#10;&#10;    // devuelve el mapa inmutable&#10;    public Map&lt;String, Integer&gt; getMapaProvincias() {&#10;        return Collections.unmodifiableMap(mapaProvincias);&#10;    }&#10;&#10;    // devuelve la provincia con más hechos y su cuenta si existe&#10;    public Optional&lt;Entry&lt;String, Integer&gt;&gt; getProvinciaConMasHechos() {&#10;        if (mapaProvincias.isEmpty()) return Optional.empty();&#10;        Entry&lt;String, Integer&gt; max = Collections.max(mapaProvincias.entrySet(), Comparator.comparingInt(Entry::getValue));&#10;        return Optional.of(max);&#10;    }&#10;&#10;    public String getResultado() {&#10;        actualizarResultado();&#10;        return resultado;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/metamapa/Domain/entities/EstadisticaSpamEliminacion.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/metamapa/Domain/entities/EstadisticaSpamEliminacion.java" />
              <option name="originalContent" value="package com.metamapa.Domain.entities;&#10;&#10;import java.util.Collections;&#10;import java.util.Comparator;&#10;import java.util.HashMap;&#10;import java.util.List;&#10;import java.util.Map;&#10;import java.util.Map.Entry;&#10;import java.util.Optional;&#10;&#10;public class EstadisticaSpamEliminacion implements InterfaceEstadistica {&#10;&#10;    private final Map&lt;String, Integer&gt; mapaSpam = new HashMap&lt;&gt;();&#10;    private String resultado = InterfaceEstadistica.RESULTADO;&#10;&#10;    @Override&#10;    public void actualizarResultado() {&#10;        mapaSpam.clear();&#10;        resultado = InterfaceEstadistica.RESULTADO;&#10;&#10;        ClienteAgregador cliente = ClienteAgregador.getInstance();&#10;        if (cliente == null) return;&#10;&#10;        List&lt;String&gt; items;&#10;        try {&#10;            // Solicitar lista global para el campo 'spamEliminacion'&#10;            items = cliente.obtenerListaEstadisticaGlobal(&quot;spamEliminacion&quot;);&#10;        } catch (Exception ex) {&#10;            return;&#10;        }&#10;&#10;        if (items == null || items.isEmpty()) return;&#10;&#10;        for (String it : items) {&#10;            if (it == null) continue;&#10;            String v = it.trim();&#10;            if (v.isEmpty()) continue;&#10;            mapaSpam.merge(v, 1, Integer::sum);&#10;        }&#10;&#10;        if (mapaSpam.isEmpty()) return;&#10;&#10;        Entry&lt;String, Integer&gt; max = Collections.max(mapaSpam.entrySet(), Comparator.comparingInt(Entry::getValue));&#10;        resultado = String.format(&quot;%s (%d)&quot;, max.getKey(), max.getValue());&#10;    }&#10;&#10;    public Map&lt;String, Integer&gt; getMapaSpam() {&#10;        return Collections.unmodifiableMap(mapaSpam);&#10;    }&#10;&#10;    public Optional&lt;Entry&lt;String, Integer&gt;&gt; getElementoConMasSpam() {&#10;        if (mapaSpam.isEmpty()) return Optional.empty();&#10;        Entry&lt;String, Integer&gt; max = Collections.max(mapaSpam.entrySet(), Comparator.comparingInt(Entry::getValue));&#10;        return Optional.of(max);&#10;    }&#10;&#10;    public String getResultado() {&#10;        actualizarResultado();&#10;        return resultado;&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.metamapa.Domain.entities;&#10;&#10;import java.util.Collections;&#10;import java.util.Comparator;&#10;import java.util.HashMap;&#10;import java.util.List;&#10;import java.util.Map;&#10;import java.util.Map.Entry;&#10;import java.util.Optional;&#10;&#10;public class EstadisticaSpamEliminacion implements InterfaceEstadistica {&#10;&#10;    private final Map&lt;String, Integer&gt; mapaSpam = new HashMap&lt;&gt;();&#10;    private String resultado = InterfaceEstadistica.RESULTADO;&#10;&#10;    @Override&#10;    public void actualizarResultado() {&#10;        mapaSpam.clear();&#10;        resultado = InterfaceEstadistica.RESULTADO;&#10;&#10;        ClienteAgregador cliente = ClienteAgregador.getInstance();&#10;        if (cliente == null) return;&#10;&#10;        List&lt;String&gt; items;&#10;        try {&#10;            // Solicitar lista global para el campo 'spamEliminacion'&#10;            items = cliente.obtenerListaEstadisticaGlobal(&quot;spamEliminacion&quot;);&#10;        } catch (Exception ex) {&#10;            return;&#10;        }&#10;&#10;        if (items == null || items.isEmpty()) return;&#10;&#10;        for (String it : items) {&#10;            if (it == null) continue;&#10;            String v = it.trim();&#10;            if (v.isEmpty()) continue;&#10;            mapaSpam.merge(v, 1, Integer::sum);&#10;        }&#10;&#10;        if (mapaSpam.isEmpty()) return;&#10;&#10;        Entry&lt;String, Integer&gt; max = Collections.max(mapaSpam.entrySet(), Comparator.comparingInt(Entry::getValue));&#10;        resultado = String.format(&quot;%s (%d)&quot;, max.getKey(), max.getValue());&#10;    }&#10;&#10;    public Map&lt;String, Integer&gt; getMapaSpam() {&#10;        return Collections.unmodifiableMap(mapaSpam);&#10;    }&#10;&#10;    public Optional&lt;Entry&lt;String, Integer&gt;&gt; getElementoConMasSpam() {&#10;        if (mapaSpam.isEmpty()) return Optional.empty();&#10;        Entry&lt;String, Integer&gt; max = Collections.max(mapaSpam.entrySet(), Comparator.comparingInt(Entry::getValue));&#10;        return Optional.of(max);&#10;    }&#10;&#10;    public String getResultado() {&#10;        actualizarResultado();&#10;        return resultado;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/metamapa/Domain/entities/InterfaceEstadistica.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/metamapa/Domain/entities/InterfaceEstadistica.java" />
              <option name="originalContent" value="package com.metamapa.Domain.entities;&#10;&#10;public interface InterfaceEstadistica {&#10;    String RESULTADO = &quot;Sin resultado&quot;; // constante pública&#10;&#10;    void actualizarResultado(); // método abstracto&#10;&#10;    // Devuelve el ClienteAgregador singleton disponible en la aplicación&#10;    default ClienteAgregador getClienteAgregador() {&#10;        return ClienteAgregador.getInstance();&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.metamapa.Domain.entities;&#10;&#10;public interface InterfaceEstadistica {&#10;    String RESULTADO = &quot;Sin resultado&quot;; // constante pública&#10;&#10;    void actualizarResultado(); // método abstracto&#10;&#10;    // Devuelve el ClienteAgregador singleton disponible en la aplicación&#10;    default ClienteAgregador getClienteAgregador() {&#10;        return ClienteAgregador.getInstance();&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>